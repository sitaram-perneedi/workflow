"""
Django settings for system project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
import datetime
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 's)r*zjh1*e5b)3tqoe=5s%6c8rho9wg*^suu*nb6rp6n2-l)t1'

ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'drf_spectacular',
    'debug_toolbar',
    'django_admin_listfilter_dropdown',
    # grm api related apps
    # framework related apps
    'system',
    'apps.key_creation',
    'apps.menu',
    'apps.shared',
    'apps.workflow_app',
    # 'django_apscheduler',
    'huey.contrib.djhuey',
    #celery related
    'django_celery_beat',
    'django_celery_results',
    #end
    'apps.airline_6E.apps.Airline6EConfig',
    # 'django_crontab'   # cron job app
]
AUTH_USER_MODEL = 'system.User'  # Changing the built-in user model to ours
CSRF_HEADER_NAME = "HTTP_X_XSRF_TOKEN"

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 'apps.workflow_app.middleware.WorkflowCSRFMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    # 'apps.workflow_app.middleware.WorkflowErrorMiddleware',
    # enabling debug tool bar
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]
# enabling debug tool bar on localhost
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

ROOT_URLCONF = 'system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # templates from email_api app
        'DIRS': [os.path.join(BASE_DIR.parent, 'apps/email_api/html'),
                 os.path.join(BASE_DIR.parent, 'system/templates'),
                 os.path.join(BASE_DIR.parent, 'apps/webservice/apps/sabre/serviceTemplates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'system.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': '6E_new',
        'USER': 'root',
        'PASSWORD': 'infiniti',
        'HOST': 'localhost',
        'PORT': '3306',
    },
    'grm': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': '6E_new',
        'USER': 'root',
        'PASSWORD': 'infiniti',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

DATABASE_ROUTERS = ['system.appRouter.AppRouter']

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# making setting false to use mail.infinitisoftware.net on SMTP connection
EMAIL_USE_SSL = False

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1),
    'ALGORITHM': 'HS256',
}
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    "DEFAULT_PAGINATION_CLASS": 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 6,
    # To expose schema in openapi 3.0
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Allow credentials for cross-origin requests if your frontend is on another origin
CORS_ALLOW_CREDENTIALS = True

# Add the origins your frontend and nodes use (adjust ports/hosts as needed)
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5500",
    "http://127.0.0.1:8000",
    "http://localhost:8000",
]
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'x-xsrf-token',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF trusted origins so cross-site POSTs from those hosts are accepted
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000',
    'http://localhost:8000',
]

KEYS_URL = str(BASE_DIR)+'/keys/'

MODELS_PATH = '/models/'

PROCESSED_DATA_PATH = '/data/processed/'

QUERY_FILE = str(BASE_DIR)+'/QUERY_FILE/'

LOG_FILENAME = 'requestLog.csv'

FUNCTION_PATH = '/functions/'

JSON_PATH = '/json/'

DOC_PATH = '/doc/'

OPER_PATH = '/operation/'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'system.backend.TokenForUserModelBackend',
)
ADMINS = [('Dilli Raj', 'dilliraj@infinitisoftware.net'), ('Kavi Arasan', 'kaviyarasan.a@infinitisoftware.net')]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATIC_URL = '/staticfiles/'
# SMTP connection timeout in sec
EMAIL_TIMEOUT = 5
# For web app  ajax client should send the CSRF token in header name (X_XSRF_TOKEN)
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_HEADER_NAME = "HTTP_X_CSRFTOKEN"
CSRF_COOKIE_NAME = 'csrftoken'
# Custom own settings starts
USER_TITLES = (
    ('Mr', 'Mr'),
    ('Ms', 'Ms'),
    ('Mrs', 'Mrs'),
)
# Password reset link expiry hour
PASSWORD_RESET_LINK_EXPIRY_HOUR = 8
# Front end react app url
FRONT_END_URL = "https://mail-v2.grouprm.net/"
# default from email
DEFAULT_FROM_EMAIL = "noreply@grmapi-v2.infinitisoftware.net"
# MEDIA_ROOT for user-uploaded files todo: have meeting /w team and decide where uploaded files can be stored have
#  meeting whether to have nginx server the download folder as recommended in docs or write custom url path to
#  download file like grouprm/filedownload.php and readfile
MEDIA_ROOT = os.path.join(BASE_DIR.parent, 'media')
MEDIA_URL = "/uploads/"
# Loading ,logging configuration
from system.utils.log.logging_configuration import get_logging_conf

LOGGING = get_logging_conf()
SPECTACULAR_SETTINGS = {
    'TITLE': 'GRM API',
    'DESCRIPTION': 'GRM api ',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': True,
    # OTHER SETTINGS
}
# cron job settings
CRONJOBS = [
    # Runs every 1 minute for testing
# ('*/1 * * * *', 'apps.airline_6E.cron.my_scheduled_job','>> /var/www/html/GRM/system/QUERY_FILE/cron_debug.log 2>&1'),
# ('*/1 * * * *', 'apps.airline_6E.QueryFileMoving.QueryFileMoving.getting_detailes','>> /var/www/html/GRM/system/QUERY_FILE/cron_debug.log 2>&1'),
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    "DEFAULT_PAGINATION_CLASS": 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 6,
    # To expose schema in openapi 3.0
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
# Huey config
# from huey import RedisHuey

# HUEY = RedisHuey(
#     'my_app',         # name for your huey instance
#     host='localhost', # Redis host
#     port=3306,        # Redis port
#     db=0,             # Redis DB (optional)
#     password=None,    # if Redis has password
# )

# APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a" 

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'django-db' # Use the alias 'django-db' with a hyphen

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'